TEST_WORKING_PATH=/tmp/__shunit2_tmp

clear_global_vars() {
	/bin/rm -rf "$TEST_WORKING_PATH"
}

set_global_var() {
	local tmp_file="$TEST_WORKING_PATH"
	for ((i=1; i<$#; ))
	do
		tmp_file="$tmp_file/$1"
		shift
	done
	local tmp_path="$(dirname "$tmp_file")"
	[ -e "$tmp_path" ] || /bin/mkdir -p "$tmp_path"
	/bin/cat > "$tmp_file" <<EOF
$1
EOF
}

get_global_var() {
	local tmp_file="$TEST_WORKING_PATH"
	for ((i=0; i<$#; ))
	do
		tmp_file="$tmp_file/$1"
		shift
	done
	[ -f "$tmp_file" ] && /bin/cat "$tmp_file"
}

rm_global_var() {
	local tmp_file="$TEST_WORKING_PATH/$1"
	/bin/rm -rf "$tmp_file"
}

get_subvars_count() {
	local tmp_file="$TEST_WORKING_PATH"
	for ((i=0; i<$#; ))
	do
		tmp_file="$tmp_file/$1"
		shift
	done
	/bin/ls "$tmp_file" 2>/dev/null | /usr/bin/wc -l
}


mock_function() {
	local content='return 0'
	if [ $# == 2 ]; then
		content="$2"
	fi
	local body="$1() {
	local CALLED_TIMES=\$(get_global_var __mocked_fun $1 called_times)
	((CALLED_TIMES++))
	set_global_var __mocked_fun $1 called_times \$CALLED_TIMES
	local arg
	local i=1
	for arg in \"\$@\"
	do
		set_global_var __mocked_fun $1 called_args \$CALLED_TIMES \$i \"\$arg\"
		((i++))
	done
	$content
}"
	rm_global_var __mocked_fun $1
	set_global_var __mocked_fun $1 called_times 0
	eval "$body"
}

print_error() {
	local res=$?
	if [ 0 == "$res" ]; then
		res=1
	fi
	/bin/echo "$1" >&2
	return $res
}

mock_verify() {
	local fun_name=$1
	local verify_arg="$2"
	local called_times=$(get_global_var __mocked_fun $fun_name called_times)
	case "$verify_arg" in
	NEVER_CALLED)
		[ "$called_times" == 0 ] || \
		print_error "Expect <$fun_name> shall never be called, but called <$called_times> time(s)"
	;;
	EXACTLY_CALLED)
		local expect_times="$3"
		[ "$called_times" == $expect_times ] || \
		print_error "Expect <$fun_name> shall never be called <$expect_times> times, but called <$called_times> time(s)"
	;;
	IN_CALL)
		local expect_times="$3"
		([ $expect_times -le "$called_times" ] || \
		print_error "<$fun_name> only be called <$called_times> times." ) && (
		shift 4
		local i=0
		local arg
		local res=0
		local passed_arg_count=$(get_subvars_count __mocked_fun $fun_name called_args $expect_times)
		for arg in "$@"
		do
			if [ __ANY_LAST__  == "$arg" ]; then
				return $res
			fi
			if [ $i == $passed_arg_count ]; then
				print_error "Few expected arguments, passed <$passed_arg_count> arguments in the calling <$expect_times> of <$fun_name>" 
				return
			fi
			((i++))
			if [ __ANY_VALUE__ != "$arg" ]; then
				local real_arg="$(get_global_var __mocked_fun $fun_name called_args $expect_times $i)" 
				[ "$arg" == "$real_arg" ] || \
				print_error "Unexpected argument <$i> in the calling <$expect_times> of <$fun_name>, expect:<$arg> but was:<$real_arg>" || res=$?
			fi
		done
		( [ $passed_arg_count == $# ] || print_error "More unexpected arguments, passed <$passed_arg_count> arguments in the calling <$expect_times> of <$fun_name>") && \
		return $res )
	;;
	esac
}

