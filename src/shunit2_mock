mock_working_path=/tmp/__shunit2_mock

clear_global_vars() {
	/bin/rm -rf "$mock_working_path"
}

set_global_var() {
	local tmp_file="$mock_working_path"
	for ((i=1; i<$#; ))
	do
		tmp_file="$tmp_file/$1"
		shift
	done
	local tmp_path="$(dirname "$tmp_file")"
	[ -e "$tmp_path" ] || /bin/mkdir -p "$tmp_path"
	/bin/cat > "$tmp_file" <<EOF
$1
EOF
}

get_global_var() {
	local tmp_file="$mock_working_path"
	for ((i=0; i<$#; ))
	do
		tmp_file="$tmp_file/$1"
		shift
	done
	[ -f "$tmp_file" ] && /bin/cat "$tmp_file"
}

rm_global_var() {
	local tmp_file="$mock_working_path/$1"
	/bin/rm -rf "$tmp_file"
}


mock_function() {
	local content='return 0'
	if [ $# == 2 ]; then
		content="$2"
	fi
	local body="$1() {
	local CALLED_TIMES=\$(get_global_var __mocked_fun $1 called_times)
	((CALLED_TIMES++))
	set_global_var __mocked_fun $1 called_times \$CALLED_TIMES
	local arg
	local i=1
	for arg in \"\$@\"
	do
		set_global_var __mocked_fun $1 called_args \$CALLED_TIMES \$i \"\$arg\"
		((i++))
	done
	$content
}"
	rm_global_var __mocked_fun $1
	set_global_var __mocked_fun $1 called_times 0
	eval "$body"
}
